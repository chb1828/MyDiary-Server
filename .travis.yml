language: java
jdk:
  - openjdk8

branches:
  only:
    - master

# Travis CI 서버의 Home
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

script:
  # Build
  - ./gradlew clean build

  - DOCKER_USER=chb1828
  - DOCKER_PASS=qjaand6378
  - PRJ_NAME=scheduler

  - PRJ_JAR=${PRJ_NAME}.jar
  -
  # DOCKER BUILD
  - docker build -t ${PRJ_NAME} --build-arg JAR_FILE=build/libs/${PRJ_JAR} ./

  # PUSH TO DOCKER HUB
  - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
  - docker tag ${PRJ_NAME} ${DOCKER_USER}/${PRJ_NAME}:latest

  - docker push ${DOCKER_USER}/${PRJ_NAME}

before_install:
  - chmod +x gradlew
  - mkdir -p before-deploy
  - cp scripts/*.sh before-deploy/
  - cp appspec.yml before-deploy/
  - cp build/libs/*.jar before-deploy/
  - cd before-deploy && zip -r before-deploy *
  - cd ../ && mkdir -p deploy
  - mv before-deploy/before-deploy.zip deploy/springboot-webservice.zip

deploy: # 배포
  - provider: s3 # AWS S3를 의미
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: chb-scheduler-bucket # S3에 생성한 버킷
    region: ap-northeast-2
    skip_cleanup: true
    local_dir: deploy # deploy 디렉터리에 있는 파일을 s3로 업로드 하겠다는 의미
    wait-until-deployed: true
    on:
      repo: chb1828/MyDiary-Server #Github 주소
      branch: master
  - provider: codedeploy # AWS CodeDeploy를 의미
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: chb-scheduler-bucket # AWS CodeDeploy가 다운로드 받은 버킷
    key: springboot-webservice.zip # 해당 버킷에 저장되어 있는 파일 이름
    bundle_type: zip # 버킷에 저장되어 있는 파일의 확장자
    application: chb-scheduler # AWS 배포 애플리케이션
    # deployment_group: ci-cd-deploy-grop # AWS 배포 애플리케이션에 만들어져 있는 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true
    on:
      repo: chb1828/MyDiary-Server
      branch: master

